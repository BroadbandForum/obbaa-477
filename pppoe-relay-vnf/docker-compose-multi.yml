version: '3.4'

# DO NOT CHANGE IP ADDRESSES, as they are used by containers' apps

networks:
  mongo_network:
    driver: bridge
    name: mongo_network
    ipam:
      config:
        - subnet: "172.40.1.0/24"
    driver_opts:
      com.docker.network.bridge.name: mongo_network

  kafka_network:
    driver: bridge
    name: kafka_network
    ipam:
      config:
        - subnet: "172.16.1.0/24"
    driver_opts:
      com.docker.network.bridge.name: kafka_network

  client_olt1:
    driver: bridge
    name: client_olt1
    ipam:
      config:
        - subnet: "172.21.1.0/24"
    driver_opts:
      com.docker.network.bridge.name: client_olt1

  vnf_olt1:
    driver: bridge
    name: vnf_olt1
    ipam:
      config:
        - subnet: "172.21.2.0/24"
    driver_opts:
      com.docker.network.bridge.name: vnf_olt1

  server_olt1:
    driver: bridge
    name: server_olt1
    ipam:
      config:
        - subnet: "172.21.3.0/24"
    driver_opts:
      com.docker.network.bridge.name: server_olt1

  client_olt2:
    driver: bridge
    name: client_olt2
    ipam:
      config:
        - subnet: "172.22.1.0/24"
    driver_opts:
      com.docker.network.bridge.name: client_olt2

  vnf_olt2:
    driver: bridge
    name: vnf_olt2
    ipam:
      config:
        - subnet: "172.22.2.0/24"
    driver_opts:
      com.docker.network.bridge.name: vnf_olt2

  server_olt2:
    driver: bridge
    name: server_olt2
    ipam:
      config:
        - subnet: "172.22.3.0/24"
    driver_opts:
      com.docker.network.bridge.name: server_olt2

services:
  client1:
    image: pppoe_client:latest
    container_name: pppoe_client1
    privileged: true
    build:
      context: ./pppoe_client
      dockerfile: ./Dockerfile
    networks:
      client_olt1:
        ipv4_address: "172.21.1.2"
    depends_on:
      - olt1
    command: ./client.sh

  client2:
    image: pppoe_client:latest
    container_name: pppoe_client2
    privileged: true
    build:
      context: ./pppoe_client
      dockerfile: ./Dockerfile
    networks:
      client_olt2:
        ipv4_address: "172.22.1.2"
    depends_on:
      - olt2
    command: ./client.sh

  pppoe_relay_vnf:
    image: pppoe-relay-vnf:latest
    container_name: pppoe-relay-vnf
    ports: 
      - "50051:50051"
    build: 
      context: ..
      dockerfile: ./pppoe-relay-vnf/vnf.Dockerfile
    networks:
      vnf_olt1:
        ipv4_address: "172.21.2.2"
      vnf_olt2:
        ipv4_address: "172.22.2.2"
      mongo_network:
        ipv4_address: "172.40.1.2"
      kafka_network:
        ipv4_address: "172.16.1.2"
    environment:
      - VNF_NAME=pppoe_relay_vnf
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - VNF_MODE=server
      - DB_NAME=pppoe_relay_vnf
      - SOCKET_GRPC=0.0.0.0:50051
      - DISCARD_ON_ERROR=true
    command: ./vnf

  server1:
    image: pppoe_server:latest
    container_name: pppoe_server1
    privileged: true
    build:
      context: ./pppoe_server
      dockerfile: ./Dockerfile
    networks:
      server_olt1:
        ipv4_address: "172.21.3.2"
    depends_on:
      - client1
    command: ./server.sh 172.21.3.2 172.21.1.2

  server2:
    image: pppoe_server:latest
    container_name: pppoe_server2
    privileged: true
    build:
      context: ./pppoe_server
      dockerfile: ./Dockerfile
    networks:
      server_olt2:
        ipv4_address: "172.22.3.2"
    depends_on:
      - client2
    command: ./server.sh 172.22.3.2 172.22.1.2

  olt1:
    image: pppoe-olt-app:latest
    hostname: olt1
    container_name: olt1
    build: 
      context: ..
      dockerfile: ./pppoe-relay-vnf/olt_app.Dockerfile
    networks: 
      client_olt1: 
        ipv4_address: "172.21.1.3"
      vnf_olt1:
        ipv4_address: "172.21.2.3"
      server_olt1:
        ipv4_address: "172.21.3.3"
    depends_on:
      - pppoe_relay_vnf
    environment:
      - RUN_IMMEDIATELY=true  # if true, app is run immediatly. if false, container will stall, so you can run the app manually anytime
      - CLIENT_ADDR=172.21.1.3
      - SERVER_ADDR=172.21.3.3
      - VNF_ADDR=172.21.2.2
      - VNF_PORT=50051
    command: ./olt_app.sh

  olt2:
    image: pppoe-olt-app:latest
    hostname: olt2
    container_name: olt2
    build: 
      context: ..
      dockerfile: ./pppoe-relay-vnf/olt_app.Dockerfile
    networks: 
      client_olt2: 
        ipv4_address: "172.22.1.3"
      vnf_olt2:
        ipv4_address: "172.22.2.3"
      server_olt2:
        ipv4_address: "172.22.3.3"
    depends_on:
      - pppoe_relay_vnf
    environment:
      - RUN_IMMEDIATELY=true  # if true, app is run immediatly. if false, container will stall, so you can run the app manually anytime
      - CLIENT_ADDR=172.22.1.3
      - SERVER_ADDR=172.22.3.3
      - VNF_ADDR=172.22.2.2
      - VNF_PORT=50051
    command: ./olt_app.sh

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      kafka_network:
        ipv4_address: "172.16.1.9"

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      kafka_network:
        ipv4_address: "172.16.1.6"

  # kafka-gpb-tester:
  #   image: kafka-gpb-tester:latest
  #   container_name: kafka-gpb-tester
  #   build: 
  #     context: ../common/kafka-gpb-tester/
  #     dockerfile: ./Dockerfile
  #   networks:
  #     kafka_network:
  #       ipv4_address: "172.16.1.3"
  #   depends_on:
  #     - kafka
      

  mongo:
    image: mongo:6.0
    hostname: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      mongo_network:
        ipv4_address: "172.40.1.3"
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: user
    #   MONGO_INITDB_ROOT_PASSWORD: pass
    
  baa:
    image: broadbandforum/baa:develop
    #image: baa_5.1.0_dolt:latest
    #image: broadbandforum/baa:R5.1.0
    hostname: baa
    #build: ./
    container_name: baa
    restart: always
    ports:
        - "8080:8080"
        - "5005:5005"
        - "9292:9292"
        - "4335:4335"
        - "162:162/udp"
    environment:
        #- EXTRA_JAVA_OPTS=-Xms128M -Xmx512M -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005
        - BAA_USER=admin
        - BAA_USER_PASSWORD=password
        #Possible Values for PMA_SESSION_FACTORY_TYPE are REGULAR,TRANSPARENT, Default value is REGULAR
        - PMA_SESSION_FACTORY_TYPE=REGULAR
        - MAXIMUM_ALLOWED_ADAPTER_VERSIONS=3
        - VOLTMF_NAME=vOLTMF
        # Below tag shall be set as false if the BAA is going to be tested for Scalability/Performance
        - NC_ENABLE_POST_EDIT_DS_VALIDATION_SUPPORT=True
        # Enable Model Abstracter or Disable Model Abstracter, Default value is Disable
        - MODEL_ABSTRACTER_STATUS=Disable
    volumes:
      - /baa/stores:/baa/stores
    networks:
      kafka_network:
        ipv4_address: "172.16.1.2"

    tty: true
    stdin_open: true
    depends_on:
      - kafka
      - zookeeper

  
    
